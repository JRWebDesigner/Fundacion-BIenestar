---
import { headerMenu } from '@data/menu';
import Logo from '@components/Logo.astro';
import { Menu, X, ChevronDown } from 'lucide-astro';
import Button from '@components/ui/Button.astro';

const ctaButton = {
    name: 'contáctanos',
    link: 'https://wa.link/b2okpa',
}

const currentPath = Astro.url.pathname;

const isCurrentPage = (link: string) => {
    if (link === '/') {
        return currentPath === '/';
    }
    return currentPath.startsWith(link);
};
---

<style>
    /* Estilo solo para la línea inferior activa */
    .nav-link.active {
        position: relative;
    }
    a{
        color:black;
    }
    .nav-link.active::after {
        content: "";
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        bottom: -4px;
        width: calc(100% - 16px);
        height: 2px;
        background-color: #f68d05;
    }
    /* Estilos para el menú móvil */
    .mobile-menu {
        transform-origin: top right;
    }
    .mobile-menu-button svg {
        transition: transform 0.2s ease;
    }
    .mobile-submenu-button svg.rotate-180 {
        transform: rotate(180deg);
    }
    /* Asegúrate que los submenús estén ocultos inicialmente */
    .mobile-submenu {
        display: none;
    }
</style>

<header class="fixed top-0 z-50 w-full left-0">
    <div class="site-container mx-auto px-4 mt-4">
        <div class="flex justify-between items-center bg-white py-4 rounded-lg px-4 border-black border">
        <Logo />
        <nav class="relative flex items-center gap-2 lg:gap-8" aria-label="Site Navigation">
            <!-- Desktop Menu -->
        <ul class="hidden lg:flex lg:gap-8 items-center">
            {headerMenu.map((item, index) => (
                <li class="relative group">
                    <div class="flex items-center gap-1">
                        <a 
                            href={item.link} 
                            class:list={[
                                "nav-link text-small font-medium rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-nav-text-active",
                                isCurrentPage(item.link) 
                                    ? "text-nav-text-current font-semibold active" 
                                    : "text-nav-text hover:text-nav-text-hover"
                            ]}
                            aria-expanded={item.children ? "false" : undefined}
                            aria-haspopup={item.children ? "true" : undefined}
                            aria-current={isCurrentPage(item.link) ? "page" : undefined}
                            data-nav-id={index}
                        >
                            {item.name}
                            {item.children && item.showArrow && (
                                <ChevronDown 
                                    size={16} 
                                    class="transform transition-transform inline-block ml-1" 
                                    aria-hidden="true"
                                />
                            )}
                        </a>
                    </div>
                    {item.children && (
                        <ul
                            class:list={[
                                "submenu absolute mt-2 bg-nav-submenu-bg border-black border rounded-md min-w-[200px] transition-all duration-200 opacity-0 invisible overflow-hidden z-50",
                                index === headerMenu.length - 1 ? "right-0" : "left-0"
                            ]}
                            role="menu"
                        >
                            {item.children.map(child => (
                                <li role="none">
                                    <a 
                                        href={child.link}
                                        class:list={[
                                            "block px-4 text-small py-2 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-nav-text-active",
                                            isCurrentPage(child.link) 
                                                ? "text-nav-text-current font-semibold" 
                                                : "text-nav-text hover:text-nav-text-hover"
                                        ]}
                                        role="menuitem"
                                        aria-current={isCurrentPage(child.link) ? "page" : undefined}
                                    >
                                        {child.name}
                                    </a>
                                </li>
                            ))}
                        </ul>
                    )}
                </li>
            ))}
        </ul>

        <Button href={ctaButton.link} variant="primary" class="text-white uppercase" style="color:white !important">{ctaButton.name}</Button>

        <!-- Mobile Menu Button -->
        <button 
            class="mobile-menu-button relative z-30 p-2 border-none cursor-pointer bg-transparent lg:hidden"
            aria-label="Toggle Menu"
            aria-expanded="false"
        >
            <span class="menu-icon block">
                <Menu size={24} class="text-body-base"/>
            </span>
            <span class="close-icon hidden">
                <X size={24} class="text-white"/>
            </span>
        </button>

        <!-- Mobile Menu Panel -->
        <div 
            class="mobile-menu fixed inset-0 z-20 px-8 pt-20 bg-primary lg:hidden hidden opacity-0 scale-95 transform transition-all duration-200 ease-out overflow-y-auto"
        >
            <ul class="flex flex-col gap-4">
                {headerMenu.map(item => (
                    <li>
                        <div class="text-white">
                            <div class="flex items-center justify-between">
                                <a 
                                    href={item.link} 
                                    class:list={[
                                        "nav-link py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active",
                                        isCurrentPage(item.link) 
                                            ? "text-nav-mobile-text-current font-semibold active" 
                                            : "text-nav-mobile-text hover:text-nav-mobile-text-hover"
                                    ]}
                                    aria-current={isCurrentPage(item.link) ? "page" : undefined}
                                >
                                    {item.name}
                                </a>
                                {item.children && (
                                    <button 
                                        class:list={[
                                            "mobile-submenu-button p-2 -mr-2 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active",
                                            isCurrentPage(item.link) 
                                                ? "text-nav-mobile-text-current" 
                                                : "text-nav-mobile-text hover:text-nav-mobile-text-hover"
                                        ]}
                                        aria-label={`Toggle ${item.name} submenu`}
                                        aria-expanded="false"
                                    >
                                        <ChevronDown 
                                            size={16} 
                                            class="transform transition-transform duration-200" 
                                        />
                                    </button>
                                )}
                            </div>
                            {item.children && (
                                <ul
                                    class="mobile-submenu ml-4 mt-2 space-y-2 hidden"
                                    role="menu"
                                >
                                    {item.children.map(child => (
                                        <li role="none">
                                            <a 
                                                href={child.link}
                                                class:list={[
                                                    "block py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-nav-mobile-text-active",
                                                    isCurrentPage(child.link) 
                                                        ? "text-nav-mobile-text-current font-semibold" 
                                                        : "text-nav-mobile-text hover:text-nav-mobile-text-hover"
                                                ]}
                                                role="menuitem"
                                                aria-current={isCurrentPage(child.link) ? "page" : undefined}
                                            >
                                                {child.name}
                                            </a>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </li>
                ))}
            </ul>
            
            <div class="mt-8 pb-8">
                <Button href={ctaButton.link} variant="ghostLight" >{ctaButton.name}
                </Button>
            </div>
        </div>
        </nav>
    </div>
</header>

<script is:inline>
    // Manejo del estado activo
    document.addEventListener('DOMContentLoaded', () => {
        const navLinks = document.querySelectorAll('.nav-link');
        const currentPath = window.location.pathname;
        
        navLinks.forEach(link => {
            // Establecer estado inicial
            if (link.getAttribute('href') === currentPath) {
                link.classList.add('active');
            }
            
            // Manejar clics
            link.addEventListener('click', function(e) {
                if (!this.hasAttribute('aria-haspopup')) {
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
                }
            });
        });

        // Manejo del menú móvil
        const mobileMenuButton = document.querySelector('.mobile-menu-button');
        const mobileMenu = document.querySelector('.mobile-menu');
        const mobileSubmenuButtons = document.querySelectorAll('.mobile-submenu-button');

        // Alternar menú principal móvil
        mobileMenuButton.addEventListener('click', () => {
            const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
            
            // Alternar iconos
            document.querySelector('.menu-icon').classList.toggle('hidden');
            document.querySelector('.close-icon').classList.toggle('hidden');
            
            // Alternar visibilidad del menú
            mobileMenu.classList.toggle('hidden');
            mobileMenu.classList.toggle('opacity-0');
            mobileMenu.classList.toggle('scale-95');
            
            // Actualizar atributo ARIA
            mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
        });

        // Manejar submenús móviles
        mobileSubmenuButtons.forEach(button => {
            button.addEventListener('click', () => {
                const submenu = button.nextElementSibling;
                const isExpanded = button.getAttribute('aria-expanded') === 'true';
                
                // Alternar submenú
                submenu.classList.toggle('hidden');
                
                // Rotar ícono
                const icon = button.querySelector('svg');
                icon.classList.toggle('rotate-180');
                
                // Actualizar atributo ARIA
                button.setAttribute('aria-expanded', !isExpanded);
            });
        });

        // Cerrar menú móvil al hacer clic en un enlace
        document.querySelectorAll('.mobile-menu a').forEach(link => {
            link.addEventListener('click', () => {
                if (!link.hasAttribute('aria-haspopup')) {
                    mobileMenu.classList.add('hidden', 'opacity-0', 'scale-95');
                    mobileMenuButton.setAttribute('aria-expanded', 'false');
                    document.querySelector('.menu-icon').classList.remove('hidden');
                    document.querySelector('.close-icon').classList.add('hidden');
                }
            });
        });

        // Resto del código JavaScript original...
        const desktopMenuItems = document.querySelectorAll('.group');
        // ... (mantener todo el resto del código JavaScript sin cambios)
    });
</script>
